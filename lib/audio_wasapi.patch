--- audio_portaudio.c.orig   2025-05-06 12:00:00.000000000 -0700
+++ audio_portaudio.c        2025-05-06 12:00:00.000000000 -0700
@@ -31,6 +31,7 @@
 #include "portaudio.h"
 #include <pa_ringbuffer.h>
 #include "audio_portaudio.h"
+#include <pa_win_wasapi.h>    /* <— for WASAPI-specific stream info */

 #include "iaxclient_lib.h"
 #include "portmixer.h"
@@ -171,7 +172,14 @@
 static int auxStream;
 static int virtualMonoIn;
 static int virtualMonoOut;
-static int virtualMonoRing;
+static int virtualMonoRing;
 static int running;
 static struct iaxc_sound *sounds;
 static int  nextSoundId = 1;
+static MUTEX sound_lock;

 /* forward declarations */
 static int pa_start(struct iaxc_audio_driver *d);
+static int pa_openstreams(struct iaxc_audio_driver *d);
+/* new: WASAPI helper */
+static int pa_openwasapi(struct iaxc_audio_driver *d);
 static void handle_paerror(PaError err, char * where);
 static int pa_input_level_set(struct iaxc_audio_driver *d, float level);
 static float pa_input_level_get(struct iaxc_audio_driver *d);
@@ -378,7 +386,15 @@
 static int pa_openstreams(struct iaxc_audio_driver *d)
 {
-   /* old single-WMME/open style */
-   return pa_open(d);
+  /* On Win32, route through our WASAPI helper */
+#ifdef _WIN32
+  return pa_openwasapi(d);
+#else
+  /* fallback to your existing WMME/open routine */
+  return pa_open(d);
+#endif
 }

 /* Core open (blocking or callback) — untouched for posix, WMME, etc. */
@@ -446,6 +462,70 @@
     return 0;
 }
 
+/*---------------------------------------------------------------------------*/
+/* WASAPI-specific full-duplex open */
+static int pa_openwasapi(struct iaxc_audio_driver *d)
+{
+    PaError err;
+    PaHostApiIndex apiIndex = Pa_HostApiTypeIdToHostApiIndex(paWASAPI);
+    if (apiIndex < 0) {
+        PORT_LOG("pa_openwasapi: WASAPI host API not available");
+        return -1;
+    }
+
+    /* pick default WASAPI devices */
+    const PaHostApiInfo *apiInfo = Pa_GetHostApiInfo(apiIndex);
+    PaDeviceIndex inDev  = Pa_HostApiDeviceIndexToDeviceIndex(apiIndex,
+                              apiInfo->defaultInputDevice);
+    PaDeviceIndex outDev = Pa_HostApiDeviceIndexToDeviceIndex(apiIndex,
+                              apiInfo->defaultOutputDevice);
+    if (inDev < 0 || outDev < 0) {
+        PORT_LOG("pa_openwasapi: no WASAPI I/O device available");
+        return -1;
+    }
+
+    /* configure WASAPI stream info */
+    PaWasapiStreamInfo wasapiInfo = {
+        .size                   = sizeof(PaWasapiStreamInfo),
+        .hostApiType            = paWASAPI,
+        .version                = 1,
+        .flags                  = paWinWasapiUseChannelMask
+                                | paWinWasapiExplicitSampleFormat
+                                | paWinWasapiThreadPriority,
+        .threadPriority         = eThreadPriorityProAudio,
+        .channelMask            = PAWIN_SPEAKER_FRONT_CENTER,
+        .streamCategory         = eAudioCategoryCommunications,
+        .streamOption           = eStreamOptionNone
+    };
+
+    /* setup PortAudio parameters */
+    PaStreamParameters inParams = {
+        .device                    = inDev,
+        .channelCount              = 1,
+        .sampleFormat              = current_audio_format,
+        .suggestedLatency          = Pa_GetDeviceInfo(inDev)->defaultLowInputLatency,
+        .hostApiSpecificStreamInfo = &wasapiInfo
+    };
+    PaStreamParameters outParams = {
+        .device                    = outDev,
+        .channelCount              = 1,
+        .sampleFormat              = current_audio_format,
+        .suggestedLatency          = Pa_GetDeviceInfo(outDev)->defaultLowOutputLatency,
+        .hostApiSpecificStreamInfo = &wasapiInfo
+    };
+
+    /* open full-duplex stream */
+    err = Pa_OpenStream(
+        &iStream,
+        &inParams,
+        &outParams,
+        sample_rate,
+        paFramesPerBufferUnspecified,
+        paNoFlag,
+        pa_callback,
+        d
+    );
+    if (err != paNoError) {
+        PORT_LOG("pa_openwasapi: Pa_OpenStream failed: %s", Pa_GetErrorText(err));
+        return -1;
+    }
+
+    /* we now use oneStream for both input and output */
+    oneStream = 1;
+    oStream   = iStream;
+
+    return 0;
+}
+/*---------------------------------------------------------------------------*/

 /* Stop audio */
 static void pa_stop(void)
